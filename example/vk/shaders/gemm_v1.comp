#version 450 core
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_control_flow_attributes : enable

layout(binding=0) buffer InputA { float data[]; } A;
layout(binding=1) buffer InputB { float data[]; } B;
layout(binding=2) buffer Output { float data[]; } C;

/*
    "TILE_M=[2|4|8|16|32]"
    "TILE_N=[64|128]"
    "TILE_K=[4|8]"
*/
const uint TILE_M = 8;
const uint TILE_N = 64;
const uint TILE_K = 4;

layout(local_size_x = 16, local_size_y = 1, local_size_z = 1) in;
layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in; 

layout(push_constant) uniform Parameters {
   uint M;
   uint N;
   uint K;
} params;

const uint C_ROWS = TILE_M / gl_WorkGroupSize.y;
const uint C_COLS = TILE_N / (4*gl_WorkGroupSize.x);

// // 坐标 转 偏移量
// uint coordToOffset(uint i, uint j, uint stride)
// {
//     return (stride * i + j);
// }

/*
  分块矩阵乘法
*/

    // for (int gid_x = get_global_id(0), gid_y = get_global_id(1);
    //     gid_x < N && gid_y < M; 
    //     gid_x += get_global_size(0), gid_y += get_global_size(1)) {

    //     float c_sub_acc = 0;
    //     for (int k = 0; k < K; k++) {
    //         c_sub_acc += A[gid_y * lda + k] * B[k * ldb + gid_x];
    //     }
    //     C[gid_y * ldc + gid_x] = c_sub_acc;
    // }


void main() {

    const uint lda = params.K;
    const uint ldb = params.N;
    const uint ldc = params.N;

    uvec2 gid = gl_WorkGroupID.xy;
    uvec2 lid = gl_LocalInvocationID.xy;

    if (gid.x >= params.N || gid.y >= params.M)
        return;

    float acc = 0;
    for (int k = 0; k < params.K; k++) {
        acc += A.data[gid.y * lda + k] * B.data[k * ldb + gid.x];
    }
    C.data[gid.y * ldc + gid.x] = acc;
}
